#!/usr/bin/env ruby

require 'literate'
require 'pathname'
require 'fileutils'

# Literate extracts code from Leanpub Markdown files.
#
# Usage
#
#   literate [markdown_file] [template_directory]
#   literate [markdown_file1,markdownfile2,...] [template_directory]
#
# Examples
#
#   literate chapters/2-components.md code/public
#   literate chapters/2-components.md,3-servers-and-components.md code/public

def resolve_path(path)
  unless Pathname.new(path).absolute?
    File.join(Dir.pwd, path)
  else
    path
  end
end

USAGE_TEXT = %{
Usage:
\tExtract code
\t\tliterate [markdown_file] [template_directory]
\tGenerate diff
\t\tliterate -d [markdown_file] [target_diff_directory]
}

if ARGV.empty?
  abort(USAGE_TEXT)
end

if ARGV[0] == '--gen-rc'
  puts 'Generating .literaterc...'
  target = File.join(Dir.pwd, '.literaterc')
  if File.exists?(target)
    puts "\tAbort! .literaterc already exists."
    puts "\t#{target}"
  else
    source = File.expand_path(File.join(__FILE__, '../../','literaterc.example'))
    FileUtils.cp(source, target)
    puts 'Done.'
  end
  abort
end

if ARGV[0] == '-d'
  markdown_files = ARGV[1] && ARGV[1].split(',')
  target_diff_directory = ARGV[2]

  if markdown_files.nil? || target_diff_directory.nil?
    puts "Error: Expected arguments `markdown_file(s)` and `target_diff_directory`"
    abort(USAGE_TEXT)
  end

  Literate::extract_and_diff \
    markdown_files.map { |f| resolve_path(f)},
    resolve_path(target_diff_directory)
else
  markdown_files = ARGV[0] && ARGV[0].split(',')
  template_directory = ARGV[1]

  if markdown_files.nil? || template_directory.nil?
    puts "Error: Expected arguments `markdown_file(s)` and `template_directory`"
    abort(USAGE_TEXT)
  end

  Literate::extract_and_render \
    markdown_files.map { |f| resolve_path(f)},
    resolve_path(template_directory)
end
